There is a stack of water glasses in a form of pascal triangle and a person wants to pour the water at the topmost glass, but the capacity of each glass is 1 unit. Overflow takes place in such a way that after 1 unit, 1/2 of remaining unit gets into bottom left glass and other half in bottom right glass.Now the pours K units of water in the topmost glass and wants to know how much water is there in the jth glass of the ith row.

Note: Assume that there are enough glasses in the triangle till no glass overflows. 

Input:
First line of the input contains an integer T denoting the number of test cases and each test case consists of three lines. First line contain an integer K, second line contains an integer i and third line contains an integer j.

Output:
Corresponding to each test case output the remaining amount of water in jth cup of the ith row correct to 6 decimal places.

Constraints:
1 <= T<=20
1 <= K <= 1000
1 <= i <= K
1 <= j<= K

Example:
Input:
1
3 
2
1

Output:
1


Solution:

import java.util.*;
import java.lang.*;
import java.io.*;

class GFG {
	public static void main (String[] args) {
	
	    Scanner sc=new Scanner(System.in);
        int T = sc.nextInt();
        
    
        for (int hello = 0;hello <T; hello++){
            double K=sc.nextInt();
            int ii=sc.nextInt();
            int jj=sc.nextInt();
            double overflow;
            double[][] cup=new double[(int)K*2][(int)K*2];
    
            cup[0][0]=K;
        
        for(int i=1;i<K/2+1;i++){
            if(cup[i-1][0]>1){   //fill first and second cup in current row from first cup in previous row
                overflow = (cup[i-1][0]-1)/2;
                cup[i][0]=overflow;
                cup[i][1]=overflow;
                cup[i-1][0]=1;
            }
           for(int j=1;j<=i+1;j++){   //fill subsequent cups from overfilled cup from upper right of previous row
                if (cup[i-1][j]>1){
                    overflow = (cup[i-1][j]-1)/2;
                    cup[i][j]+=overflow;
                    cup[i][j+1]=overflow;
                    cup[i-1][j]=1;
                }   
            }
        }
    
         System.out.println(cup[ii-1][jj-1]);
    }                
}
}
